"use strict";function isArray(n){return _.isArray(n)}function isObject(n){return n instanceof Object&&!isArray(n)}function isString(n){return _.isString(n)}function ensureValidEnumKeyName(n){if(!n||"string"!=typeof n||!isNaN(parseInt(n)))throw"bad enum key: "+n}function keysFromArray(n){for(var r=[],e=0,t=n.length;t>e;++e){var u=n[e];ensureValidEnumKeyName(u),r.push(n[e])}return r}function keysFromObject(n){var r=[];for(var e in n)n.hasOwnProperty(e)&&(ensureValidEnumKeyName(e),r.push(e));return r}function keysFromString(n){for(var r=n.split(/[,;:\s]+/),e=0,t=r.length;t>e;++e)ensureValidEnumKeyName(r[e]);return r}function getIsFuncName(n){return ensureValidEnumKeyName(n),"is"+_.capitalize(_.camelCase(n))}function buildEnum(n,r,e){for(var t=0,u=n.length;u>t;++t){var i=n[t],s=getIsFuncName(i);r[i]={_id:i},e.push(s)}}function extendIsFuncsToEnum(n,r){_.forEach(n,function(n,e){n.toString=function(){return n._id},n.name=n.toString,n.__is_fun_nm__=getIsFuncName(n._id),_.forEach(r,function(r){n[r]=function(){return r===n.__is_fun_nm__}})})}function freeze(n){try{return Object.freeze(n)}catch(r){return n}}var _=require("lodash"),genEnum=function(n){var r=[];if(arguments.length>1)r=keysFromArray(arguments);else if(_.isArray(n))r=keysFromArray(n);else if(isObject(n))r=keysFromObject(n);else{if(!isString(n))throw new Error("Argument must be a string or an array of strings.");r=keysFromString(n)}var e={},t=[];return buildEnum(r,e,t),extendIsFuncsToEnum(e,t),freeze(e)};module.exports=genEnum;